const mongoose = require('mongoose');
const postSchema = new mongoose.Schema({
  username: String,
  content: String,
  image: String,
  likes: { type: Number, default: 0 }
});

module.exports = mongoose.model('Post', postSchema);
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: String,
  hash: String
});

userSchema.methods.setPassword = async function(password) {
  this.hash = await bcrypt.hash(password, 10);
};

userSchema.methods.validatePassword = function(password) {
  return bcrypt.compare(password, this.hash);
};
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('./models/User');

passport.use(new LocalStrategy(async (username, password, done) => {
  const user = await User.findOne({ username });
  if (!user || !(await user.validatePassword(password))) {
    return done(null, false);
  }
  return done(null, user);
}));

passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
  const user = await User.findById(id);
  done(null, user);
});

module.exports = passport;
{
  "name": "private-social-platform",
  "version": "1.0.0",
  "main": "server.js",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.0.1",
    "passport": "^0.6.0",
    "passport-local": "^1.0.0",
    "express-session": "^1.17.3",
    "socket.io": "^4.6.1",
    "multer": "^1.4.5-lts.1",
    "ejs": "^3.1.8",
    "bcryptjs": "^2.4.3"

  }
}
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);
const session = require('express-session');
const passport = require('./auth');
const multer = require('multer');
const mongoose = require('mongoose');
const User = require('./models/User');
const Post = require('./models/Post');

mongoose.connect('mongodb://localhost/social_platform');

app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(session({ secret: 'private123', resave: false, saveUninitialized: false }));
app.use(passport.initialize());
app.use(passport.session());

const upload = multer({ dest: 'uploads/' });

app.post('/login', passport.authenticate('local', {
  successRedirect: '/profile.html',
  failureRedirect: '/'
}));

app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const user = new User({ username });
  await user.setPassword(password);
  await user.save();
  res.redirect('/');
});

app.post('/post', upload.single('image'), async (req, res) => {
  const post = new Post({
    username: req.user.username,
    content: req.body.content,
    image: req.file?.filename || null
  });
  await post.save();
  res.redirect('/profile.html');
});

io.on('connection', socket => {
  socket.on('chat message', msg => {
    io.emit('chat message', msg);
  });
});

http.listen(3000, () => console.log('Server running on http://localhost:3000'));

module.exports = mongoose.model('User', userSchema);
